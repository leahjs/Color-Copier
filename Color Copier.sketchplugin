// Shortcut to copy a selected color (shift ctrl c)

// JSTalk clipboard
// https://gist.github.com/uhunkler/5465857
var clipboard = {
	pasteBoard : null,
	init : function() {
		this.pasteBoard = NSPasteboard.generalPasteboard();
	},
	set : function( text ) {
		if( typeof text === 'undefined' ) return null;

		if( !this.pasteBoard )
			this.init();

		this.pasteBoard.declareTypes_owner( [ NSPasteboardTypeString ], null );
		this.pasteBoard.setString_forType( text, NSPasteboardTypeString );

		return true;
	},
	get : function() {
		if( !this.pasteBoard )
			this.init();

		var text = this.pasteBoard.stringForType( NSPasteboardTypeString );

		return text.toString();
	}
};


// Set up the app for dialogs
var app = [NSApplication sharedApplication];


// We only want to do this if only one layer selected
switch (selection.count()) {

	case 0:
		[app displayDialog:"You must select a layer first." withTitle: "Color Copier"]
	break;

	case 1:
    runColorCopier();
	break;

	default:
    [app displayDialog:"Can't do more than one layer." withTitle: "Color Copier"]
	break;

}


// Where the magic of copying happens
function runColorCopier() {
  // Setting up the variables for the selection
  var layer = selection[0];
  var fill = null;
  var border = null;

	switch ([layer class]) {

		case MSTextLayer:
    	fill = layer.textColor();
    break;
  	default:
      if (layer.style().fills().count() > 0) {
        fill = layer.style().fills().firstObject().color();
      }
      if (layer.style().borders() > 0) {
        border = layer.style().borders().firstObject().color();
      }
    break;

	}


  // Creates the options and displays the choice modal
  var options = ["Fill - RGB", "Fill - HEX", "Border - RGB", "Border - HEX"];
  var selected = createSelect("What color do you want to copy?", options, 0)


  // What the user selected
  var indexSelected = selected[1];


  // Copy to the clipboard and show confirmation
  if (selected[0] == 1000) { // 1001 is cancelled
    switch (indexSelected) {
        case 0:
          var fillColor = fill.hexValue().toString();
          var rgb = hexToRgb(fillColor);
          output = rgb.r + ", " + rgb.g + ", " + rgb.b
          clipboard.set(output);
          [doc showMessage: "Fill color RGB [ " + output + " ] copied to clipboard."];
          break;
        case 1:
          var fillColor = fill.hexValue().toString();
          log(fillColor);
          clipboard.set(fillColor);
          [doc showMessage: "Fill color HEX [ " + fillColor + " ] copied to clipboard."];
          break;
        case 2:
          if (border != null) {
            var borderColor = border.hexValue().toString();
            var rgb = hexToRgb(borderColor);
            output = rgb.r + ", " + rgb.g + ", " + rgb.b
            clipboard.set(output);
            [doc showMessage: "Border color RGB [ " + output + " ] copied to clipboard."];
          } else {
            [app displayDialog:"No border to get a color from." withTitle: "Color Copier"]
          }
          break;
        case 3:
          if (border != null) {
            var borderColor = border.hexValue().toString();
            clipboard.set(borderColor);
            [doc showMessage: "Border color HEX [ " + borderColor + " ] copied to clipboard."];
          } else {
            [app displayDialog:"No border to get a color from." withTitle: "Color Copier"]
          }
          break;
        default:
          break;
    }
  }
}

// This is the popup asking what color to copy
function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,250,25)]
  [accessory addItemsWithObjectValues:items]
  [accessory selectItemAtIndex:selectedItemIndex]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'Copy']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  var sel = [accessory indexOfSelectedItem]

  return [responseCode, sel]
}


// Convert Hexadecimal value to RGB
// http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
function hexToRgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
    return r + r + g + g + b + b
  })

  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null
}
